// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="midpoint_line,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.404000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=226,HLS_SYN_LUT=513,HLS_VERSION=2018_2}" *)

module midpoint_line (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        midpoint_X0,
        midpoint_Y0,
        midpoint_X1,
        midpoint_Y1,
        midpoint_PX,
        midpoint_PX_ap_vld,
        midpoint_PY,
        midpoint_PY_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] midpoint_X0;
input  [31:0] midpoint_Y0;
input  [31:0] midpoint_X1;
input  [31:0] midpoint_Y1;
output  [31:0] midpoint_PX;
output   midpoint_PX_ap_vld;
output  [31:0] midpoint_PY;
output   midpoint_PY_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg midpoint_PX_ap_vld;
reg midpoint_PY_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] dx_fu_97_p2;
reg   [31:0] dx_reg_230;
reg   [30:0] p_lshr_reg_237;
wire    ap_CS_fsm_state2;
wire   [31:0] dy_fu_119_p2;
reg   [31:0] dy_reg_247;
wire   [31:0] d_fu_162_p2;
wire   [31:0] tmp_2_fu_168_p2;
reg   [31:0] tmp_2_reg_257;
wire   [31:0] x_1_fu_178_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_3_fu_173_p2;
wire   [31:0] y_0_s_fu_205_p3;
wire   [31:0] d_1_fu_214_p2;
reg   [31:0] d1_reg_70;
reg   [31:0] x1_reg_79;
reg   [31:0] y1_reg_88;
wire   [31:0] p_neg_fu_103_p2;
wire   [31:0] tmp_1_fu_132_p1;
wire   [30:0] p_lshr_f_fu_141_p4;
wire   [0:0] tmp_5_fu_125_p3;
wire   [31:0] p_neg_t_fu_135_p2;
wire   [31:0] tmp_4_fu_150_p1;
wire   [31:0] tmp_fu_154_p3;
wire   [0:0] tmp_6_fu_185_p3;
wire   [31:0] y_1_fu_193_p2;
wire   [31:0] dy_0_s_fu_199_p3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        d1_reg_70 <= d_1_fu_214_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        d1_reg_70 <= d_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x1_reg_79 <= x_1_fu_178_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x1_reg_79 <= midpoint_X0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        y1_reg_88 <= y_0_s_fu_205_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y1_reg_88 <= midpoint_Y0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dx_reg_230 <= dx_fu_97_p2;
        p_lshr_reg_237 <= {{p_neg_fu_103_p2[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dy_reg_247 <= dy_fu_119_p2;
        tmp_2_reg_257 <= tmp_2_fu_168_p2;
    end
end

always @ (*) begin
    if (((tmp_3_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        midpoint_PX_ap_vld = 1'b1;
    end else begin
        midpoint_PX_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        midpoint_PY_ap_vld = 1'b1;
    end else begin
        midpoint_PY_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_3_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign d_1_fu_214_p2 = (dy_0_s_fu_199_p3 + d1_reg_70);

assign d_fu_162_p2 = (dy_fu_119_p2 - tmp_fu_154_p3);

assign dx_fu_97_p2 = (midpoint_X1 - midpoint_X0);

assign dy_0_s_fu_199_p3 = ((tmp_6_fu_185_p3[0:0] === 1'b1) ? dy_reg_247 : tmp_2_reg_257);

assign dy_fu_119_p2 = (midpoint_Y1 - midpoint_Y0);

assign midpoint_PX = (x1_reg_79 + 32'd1);

assign midpoint_PY = ((tmp_6_fu_185_p3[0:0] === 1'b1) ? y1_reg_88 : y_1_fu_193_p2);

assign p_lshr_f_fu_141_p4 = {{dx_reg_230[31:1]}};

assign p_neg_fu_103_p2 = (32'd0 - dx_fu_97_p2);

assign p_neg_t_fu_135_p2 = (32'd0 - tmp_1_fu_132_p1);

assign tmp_1_fu_132_p1 = p_lshr_reg_237;

assign tmp_2_fu_168_p2 = (dy_fu_119_p2 - dx_reg_230);

assign tmp_3_fu_173_p2 = (($signed(x1_reg_79) < $signed(midpoint_X1)) ? 1'b1 : 1'b0);

assign tmp_4_fu_150_p1 = p_lshr_f_fu_141_p4;

assign tmp_5_fu_125_p3 = dx_reg_230[32'd31];

assign tmp_6_fu_185_p3 = d1_reg_70[32'd31];

assign tmp_fu_154_p3 = ((tmp_5_fu_125_p3[0:0] === 1'b1) ? p_neg_t_fu_135_p2 : tmp_4_fu_150_p1);

assign x_1_fu_178_p2 = (x1_reg_79 + 32'd1);

assign y_0_s_fu_205_p3 = ((tmp_6_fu_185_p3[0:0] === 1'b1) ? y1_reg_88 : y_1_fu_193_p2);

assign y_1_fu_193_p2 = (y1_reg_88 + 32'd1);

endmodule //midpoint_line
