-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dda is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x1 : IN STD_LOGIC_VECTOR (31 downto 0);
    y1 : IN STD_LOGIC_VECTOR (31 downto 0);
    xp : OUT STD_LOGIC_VECTOR (31 downto 0);
    xp_ap_vld : OUT STD_LOGIC;
    yp : OUT STD_LOGIC_VECTOR (31 downto 0);
    yp_ap_vld : OUT STD_LOGIC );
end;


architecture behav of dda is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dda,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.380000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=4757,HLS_SYN_LUT=11380,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_BFE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_202 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_4_reg_1021 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_206 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_1031 : STD_LOGIC_VECTOR (0 downto 0);
    signal dx_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal steps_fu_262_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal steps_reg_971 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_161_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_982 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_reg_993 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal Y_reg_998 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Xinc_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Yinc_reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_4_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_reg_1026 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i4_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i4_reg_1036 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_1_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_1_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_reg_1051 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal p_Val2_2_fu_479_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_reg_1056 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_5_reg_1062 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_7_fu_601_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_reg_1067 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_10_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_10_reg_1073 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_12_fu_723_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_reg_1078 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_15_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_15_reg_1084 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_17_fu_845_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_17_reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal x_assign_3_reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_161_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_164_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_8_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i2_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_1_fu_232_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_3_fu_249_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal X1_to_int_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_285_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_295_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Y1_to_int_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_327_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_337_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_1_fu_379_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_7_i_i_i_i_fu_383_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_fu_369_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_i_cast_fu_397_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_401_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_i_i_i_i_fu_415_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_407_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_i_i_cast_fu_421_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_425_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_i_cast_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i_cast_fu_441_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_7_i_i_i_i_cast_fu_393_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i_i_fu_437_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_1_i_i_i_i_fu_445_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_18_fu_457_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_i_i_i_fu_451_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_10_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_469_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_3_fu_501_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_7_i_i_i7_i_fu_505_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_2_fu_491_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i8_i_cast_fu_519_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_fu_523_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_i_i_i1_i_fu_537_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_529_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_i1_i_cast_fu_543_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_fu_547_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_i_cast_fu_555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i1_i_cast_fu_563_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_7_i_i_i7_i_cast_fu_515_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i1_i_fu_559_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_1_i_i_i1_i_fu_567_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_26_fu_579_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_i_i1_i_fu_573_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_15_fu_587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_591_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_5_fu_623_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_7_i_i_i_i1_fu_627_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_4_fu_613_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_i13_cast_fu_641_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_4_fu_645_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_i_i_i_i1_fu_659_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_2_fu_651_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_i_i16_cast_fu_665_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_5_fu_669_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_i17_cast_fu_677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i18_cast_fu_685_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_7_i_i_i_i12_cast_fu_637_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i_i1_fu_681_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_1_i_i_i_i1_fu_689_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_33_fu_701_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_i_i_i1_fu_695_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_17_fu_709_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_713_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_7_fu_745_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_7_i_i_i7_i1_fu_749_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_6_fu_735_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i8_i34_cas_fu_763_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_6_fu_767_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_i_i_i1_i1_fu_781_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_3_fu_773_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_i1_i37_cas_fu_787_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_7_fu_791_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_i38_cast_fu_799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i1_i39_cast_fu_807_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_7_i_i_i7_i33_cas_fu_759_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i1_i1_fu_803_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_1_i_i_i1_i1_fu_811_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_37_fu_823_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_i_i1_i1_fu_817_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_20_fu_831_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_835_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_853_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_i_i_i_i_fu_860_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_872_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_i_i_i1_i_fu_879_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_865_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_fu_884_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_899_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_i_i_i_i1_fu_906_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_fu_918_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_i_i_i1_i1_fu_925_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_14_fu_911_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_19_fu_930_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);

    component dda_fadd_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dda_fdiv_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dda_sitofp_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dda_fpext_32ns_64eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dda_fcmp_32ns_32nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dda_dadd_64ns_64ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dda_fadd_32ns_32nbkb_U1 : component dda_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_assign_reg_112,
        din1 => Xinc_reg_1003,
        ce => ap_const_logic_1,
        dout => grp_fu_143_p2);

    dda_fadd_32ns_32nbkb_U2 : component dda_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_assign_3_reg_122,
        din1 => Yinc_reg_1008,
        ce => ap_const_logic_1,
        dout => grp_fu_148_p2);

    dda_fdiv_32ns_32ncud_U3 : component dda_fdiv_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_977,
        din1 => tmp_7_reg_982,
        ce => ap_const_logic_1,
        dout => grp_fu_153_p2);

    dda_fdiv_32ns_32ncud_U4 : component dda_fdiv_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_reg_988,
        din1 => tmp_7_reg_982,
        ce => ap_const_logic_1,
        dout => grp_fu_157_p2);

    dda_sitofp_32ns_3dEe_U5 : component dda_sitofp_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_161_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_161_p1);

    dda_sitofp_32ns_3dEe_U6 : component dda_sitofp_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_164_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_164_p1);

    dda_sitofp_32ns_3dEe_U7 : component dda_sitofp_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dy_reg_963,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p1);

    dda_fpext_32ns_64eOg_U8 : component dda_fpext_32ns_64eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => x_assign_reg_112,
        dout => tmp_1_i_fu_170_p1);

    dda_fpext_32ns_64eOg_U9 : component dda_fpext_32ns_64eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => x_assign_3_reg_122,
        dout => tmp_1_i4_fu_174_p1);

    dda_fcmp_32ns_32nfYi_U10 : component dda_fcmp_32ns_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => x_assign_reg_112,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_3_fu_178_p2);

    dda_fcmp_32ns_32nfYi_U11 : component dda_fcmp_32ns_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => x_assign_3_reg_122,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_12_fu_184_p2);

    dda_dadd_64ns_64ng8j_U12 : component dda_dadd_64ns_64ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_i_reg_1026,
        din1 => grp_fu_190_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p2);

    dda_dadd_64ns_64ng8j_U13 : component dda_dadd_64ns_64ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_i4_reg_1036,
        din1 => grp_fu_196_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_196_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i_reg_132 <= i_1_reg_1016;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_reg_132 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_assign_3_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                x_assign_3_reg_122 <= Y_1_reg_1046;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                x_assign_3_reg_122 <= Y_reg_998;
            end if; 
        end if;
    end process;

    x_assign_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                x_assign_reg_112 <= X_1_reg_1041;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                x_assign_reg_112 <= X_reg_993;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                X_1_reg_1041 <= grp_fu_143_p2;
                Y_1_reg_1046 <= grp_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                X_reg_993 <= grp_fu_161_p1;
                Y_reg_998 <= grp_fu_164_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                Xinc_reg_1003 <= grp_fu_153_p2;
                Yinc_reg_1008 <= grp_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                dx_reg_955 <= dx_fu_210_p2;
                dy_reg_963 <= dy_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_1_reg_1016 <= i_1_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_1031 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                p_Val2_10_reg_1073 <= p_Val2_10_fu_609_p1;
                p_Val2_12_reg_1078 <= p_Val2_12_fu_723_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_reg_1031 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                p_Val2_15_reg_1084 <= p_Val2_15_fu_731_p1;
                p_Val2_17_reg_1089 <= p_Val2_17_fu_845_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_reg_1021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                p_Val2_2_reg_1056 <= p_Val2_2_fu_479_p3;
                p_Val2_s_reg_1051 <= p_Val2_s_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                p_Val2_5_reg_1062 <= p_Val2_5_fu_487_p1;
                p_Val2_7_reg_1067 <= p_Val2_7_fu_601_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((tmp_4_reg_1021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26)))) then
                reg_202 <= grp_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_13_reg_1031 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((tmp_13_reg_1031 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26)))) then
                reg_206 <= grp_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                steps_reg_971 <= steps_fu_262_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                tmp_13_reg_1031 <= tmp_13_fu_359_p2;
                tmp_1_i4_reg_1036 <= tmp_1_i4_fu_174_p1;
                tmp_1_i_reg_1026 <= tmp_1_i_fu_170_p1;
                tmp_4_reg_1021 <= tmp_4_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_6_reg_977 <= grp_fu_161_p1;
                tmp_7_reg_982 <= grp_fu_164_p1;
                tmp_8_reg_988 <= grp_fu_167_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state20, tmp_9_fu_270_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((tmp_9_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    X1_to_int_fu_281_p1 <= x_assign_reg_112;
    Y1_to_int_fu_323_p1 <= x_assign_3_reg_122;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state20, tmp_9_fu_270_p2)
    begin
        if (((tmp_9_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20, tmp_9_fu_270_p2)
    begin
        if (((tmp_9_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dx_fu_210_p2 <= std_logic_vector(unsigned(x1) - unsigned(x0));
    dy_fu_216_p2 <= std_logic_vector(unsigned(y1) - unsigned(y0));

    grp_fu_161_p0_assign_proc : process(x0, dx_reg_955, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_161_p0 <= x0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_161_p0 <= dx_reg_955;
        else 
            grp_fu_161_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_164_p0_assign_proc : process(y0, steps_reg_971, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_164_p0 <= y0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_164_p0 <= steps_reg_971;
        else 
            grp_fu_164_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_190_p1_assign_proc : process(tmp_4_reg_1021, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
            if ((tmp_4_reg_1021 = ap_const_lv1_0)) then 
                grp_fu_190_p1 <= ap_const_lv64_3FE0000000000000;
            elsif ((tmp_4_reg_1021 = ap_const_lv1_1)) then 
                grp_fu_190_p1 <= ap_const_lv64_BFE0000000000000;
            else 
                grp_fu_190_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_190_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_196_p1_assign_proc : process(tmp_13_reg_1031, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
            if ((tmp_13_reg_1031 = ap_const_lv1_0)) then 
                grp_fu_196_p1 <= ap_const_lv64_3FE0000000000000;
            elsif ((tmp_13_reg_1031 = ap_const_lv1_1)) then 
                grp_fu_196_p1 <= ap_const_lv64_BFE0000000000000;
            else 
                grp_fu_196_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_196_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_275_p2 <= std_logic_vector(unsigned(i_reg_132) + unsigned(ap_const_lv32_1));
    isNeg_1_fu_529_p3 <= sh_assign_2_fu_523_p2(11 downto 11);
    isNeg_2_fu_651_p3 <= sh_assign_4_fu_645_p2(11 downto 11);
    isNeg_3_fu_773_p3 <= sh_assign_6_fu_767_p2(11 downto 11);
    isNeg_fu_407_p3 <= sh_assign_fu_401_p2(11 downto 11);
    loc_V_1_fu_379_p1 <= p_Val2_s_fu_365_p1(52 - 1 downto 0);
    loc_V_2_fu_491_p4 <= p_Val2_5_fu_487_p1(62 downto 52);
    loc_V_3_fu_501_p1 <= p_Val2_5_fu_487_p1(52 - 1 downto 0);
    loc_V_4_fu_613_p4 <= p_Val2_10_fu_609_p1(62 downto 52);
    loc_V_5_fu_623_p1 <= p_Val2_10_fu_609_p1(52 - 1 downto 0);
    loc_V_6_fu_735_p4 <= p_Val2_15_fu_731_p1(62 downto 52);
    loc_V_7_fu_745_p1 <= p_Val2_15_fu_731_p1(52 - 1 downto 0);
    loc_V_fu_369_p4 <= p_Val2_s_fu_365_p1(62 downto 52);
    n_assign_1_fu_232_p3 <= 
        dx_reg_955 when (tmp_i_fu_222_p2(0) = '1') else 
        tmp_i_8_fu_227_p2;
    n_assign_3_fu_249_p3 <= 
        dy_reg_963 when (tmp_i1_fu_239_p2(0) = '1') else 
        tmp_i2_fu_244_p2;
    notlhs1_fu_341_p2 <= "0" when (tmp_s_fu_327_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_299_p2 <= "0" when (tmp_fu_285_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_347_p2 <= "1" when (tmp_27_fu_337_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_305_p2 <= "1" when (tmp_1_fu_295_p1 = ap_const_lv23_0) else "0";
    p_Result_1_fu_872_p3 <= p_Val2_5_reg_1062(63 downto 63);
    p_Result_2_fu_899_p3 <= p_Val2_10_reg_1073(63 downto 63);
    p_Result_3_fu_918_p3 <= p_Val2_15_reg_1084(63 downto 63);
    p_Result_s_fu_853_p3 <= p_Val2_s_reg_1051(63 downto 63);
    p_Val2_10_fu_609_p1 <= reg_206;
    p_Val2_12_fu_723_p3 <= 
        tmp_17_fu_709_p1 when (isNeg_2_fu_651_p3(0) = '1') else 
        tmp_19_fu_713_p4;
    p_Val2_14_fu_911_p3 <= 
        p_Val2_6_i_i_i_i1_fu_906_p2 when (p_Result_2_fu_899_p3(0) = '1') else 
        p_Val2_12_reg_1078;
    p_Val2_15_fu_731_p1 <= reg_206;
    p_Val2_17_fu_845_p3 <= 
        tmp_20_fu_831_p1 when (isNeg_3_fu_773_p3(0) = '1') else 
        tmp_21_fu_835_p4;
    p_Val2_19_fu_930_p3 <= 
        p_Val2_6_i_i_i1_i1_fu_925_p2 when (p_Result_3_fu_918_p3(0) = '1') else 
        p_Val2_17_reg_1089;
    p_Val2_2_fu_479_p3 <= 
        tmp_10_fu_465_p1 when (isNeg_fu_407_p3(0) = '1') else 
        tmp_14_fu_469_p4;
    p_Val2_4_fu_865_p3 <= 
        p_Val2_6_i_i_i_i_fu_860_p2 when (p_Result_s_fu_853_p3(0) = '1') else 
        p_Val2_2_reg_1056;
    p_Val2_5_fu_487_p1 <= reg_202;
    p_Val2_6_i_i_i1_i1_fu_925_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_17_reg_1089));
    p_Val2_6_i_i_i1_i_fu_879_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_7_reg_1067));
    p_Val2_6_i_i_i_i1_fu_906_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_12_reg_1078));
    p_Val2_6_i_i_i_i_fu_860_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_2_reg_1056));
    p_Val2_7_fu_601_p3 <= 
        tmp_15_fu_587_p1 when (isNeg_1_fu_529_p3(0) = '1') else 
        tmp_16_fu_591_p4;
    p_Val2_9_fu_884_p3 <= 
        p_Val2_6_i_i_i1_i_fu_879_p2 when (p_Result_1_fu_872_p3(0) = '1') else 
        p_Val2_7_reg_1067;
    p_Val2_s_fu_365_p1 <= reg_202;
    sh_assign_1_fu_425_p3 <= 
        tmp_9_i_i_i_i_cast_fu_421_p1 when (isNeg_fu_407_p3(0) = '1') else 
        sh_assign_fu_401_p2;
        sh_assign_1_i17_cast_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_fu_669_p3),32));

        sh_assign_1_i_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_425_p3),32));

    sh_assign_2_fu_523_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i8_i_cast_fu_519_p1));
    sh_assign_3_fu_547_p3 <= 
        tmp_9_i_i_i1_i_cast_fu_543_p1 when (isNeg_1_fu_529_p3(0) = '1') else 
        sh_assign_2_fu_523_p2;
        sh_assign_3_i38_cast_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_7_fu_791_p3),32));

        sh_assign_3_i_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_fu_547_p3),32));

    sh_assign_4_fu_645_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_i13_cast_fu_641_p1));
    sh_assign_5_fu_669_p3 <= 
        tmp_9_i_i_i_i16_cast_fu_665_p1 when (isNeg_2_fu_651_p3(0) = '1') else 
        sh_assign_4_fu_645_p2;
    sh_assign_6_fu_767_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i8_i34_cas_fu_763_p1));
    sh_assign_7_fu_791_p3 <= 
        tmp_9_i_i_i1_i37_cas_fu_787_p1 when (isNeg_3_fu_773_p3(0) = '1') else 
        sh_assign_6_fu_767_p2;
    sh_assign_fu_401_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_i_cast_fu_397_p1));
    steps_fu_262_p3 <= 
        n_assign_1_fu_232_p3 when (tmp_5_fu_256_p2(0) = '1') else 
        n_assign_3_fu_249_p3;
    tmp_10_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_457_p3),32));
    tmp_11_fu_353_p2 <= (notrhs1_fu_347_p2 or notlhs1_fu_341_p2);
    tmp_13_fu_359_p2 <= (tmp_12_fu_184_p2 and tmp_11_fu_353_p2);
    tmp_14_fu_469_p4 <= tmp_3_i_i_i_i_fu_451_p2(84 downto 53);
    tmp_15_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_579_p3),32));
    tmp_16_fu_591_p4 <= tmp_3_i_i_i1_i_fu_573_p2(84 downto 53);
    tmp_17_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_701_p3),32));
    tmp_18_fu_457_p3 <= tmp_1_i_i_i_i_fu_445_p2(53 downto 53);
    tmp_19_fu_713_p4 <= tmp_3_i_i_i_i1_fu_695_p2(84 downto 53);
    tmp_1_fu_295_p1 <= X1_to_int_fu_281_p1(23 - 1 downto 0);
    tmp_1_i_i_i1_i1_fu_811_p2 <= std_logic_vector(shift_right(unsigned(tmp_7_i_i_i7_i1_fu_749_p4),to_integer(unsigned('0' & tmp_i_i_i1_i39_cast_fu_807_p1(31-1 downto 0)))));
    tmp_1_i_i_i1_i_fu_567_p2 <= std_logic_vector(shift_right(unsigned(tmp_7_i_i_i7_i_fu_505_p4),to_integer(unsigned('0' & tmp_i_i_i1_i_cast_fu_563_p1(31-1 downto 0)))));
    tmp_1_i_i_i_i1_fu_689_p2 <= std_logic_vector(shift_right(unsigned(tmp_7_i_i_i_i1_fu_627_p4),to_integer(unsigned('0' & tmp_i_i_i_i18_cast_fu_685_p1(31-1 downto 0)))));
    tmp_1_i_i_i_i_fu_445_p2 <= std_logic_vector(shift_right(unsigned(tmp_7_i_i_i_i_fu_383_p4),to_integer(unsigned('0' & tmp_i_i_i_i_cast_fu_441_p1(31-1 downto 0)))));
    tmp_20_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_823_p3),32));
    tmp_21_fu_835_p4 <= tmp_3_i_i_i1_i1_fu_817_p2(84 downto 53);
    tmp_26_fu_579_p3 <= tmp_1_i_i_i1_i_fu_567_p2(53 downto 53);
    tmp_27_fu_337_p1 <= Y1_to_int_fu_323_p1(23 - 1 downto 0);
    tmp_2_fu_311_p2 <= (notrhs_fu_305_p2 or notlhs_fu_299_p2);
    tmp_33_fu_701_p3 <= tmp_1_i_i_i_i1_fu_689_p2(53 downto 53);
    tmp_37_fu_823_p3 <= tmp_1_i_i_i1_i1_fu_811_p2(53 downto 53);
    tmp_3_i_i_i1_i1_fu_817_p2 <= std_logic_vector(shift_left(unsigned(tmp_7_i_i_i7_i33_cas_fu_759_p1),to_integer(unsigned('0' & tmp_i_i_i1_i1_fu_803_p1(31-1 downto 0)))));
    tmp_3_i_i_i1_i_fu_573_p2 <= std_logic_vector(shift_left(unsigned(tmp_7_i_i_i7_i_cast_fu_515_p1),to_integer(unsigned('0' & tmp_i_i_i1_i_fu_559_p1(31-1 downto 0)))));
    tmp_3_i_i_i_i1_fu_695_p2 <= std_logic_vector(shift_left(unsigned(tmp_7_i_i_i_i12_cast_fu_637_p1),to_integer(unsigned('0' & tmp_i_i_i_i1_fu_681_p1(31-1 downto 0)))));
    tmp_3_i_i_i_i_fu_451_p2 <= std_logic_vector(shift_left(unsigned(tmp_7_i_i_i_i_cast_fu_393_p1),to_integer(unsigned('0' & tmp_i_i_i_i_fu_437_p1(31-1 downto 0)))));
    tmp_4_fu_317_p2 <= (tmp_3_fu_178_p2 and tmp_2_fu_311_p2);
    tmp_5_fu_256_p2 <= "1" when (signed(n_assign_1_fu_232_p3) > signed(n_assign_3_fu_249_p3)) else "0";
    tmp_7_i_i_i7_i1_fu_749_p4 <= ((ap_const_lv1_1 & loc_V_7_fu_745_p1) & ap_const_lv1_0);
    tmp_7_i_i_i7_i33_cas_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_i_i_i7_i1_fu_749_p4),137));
    tmp_7_i_i_i7_i_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_i_i_i7_i_fu_505_p4),137));
    tmp_7_i_i_i7_i_fu_505_p4 <= ((ap_const_lv1_1 & loc_V_3_fu_501_p1) & ap_const_lv1_0);
    tmp_7_i_i_i_i12_cast_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_i_i_i_i1_fu_627_p4),137));
    tmp_7_i_i_i_i1_fu_627_p4 <= ((ap_const_lv1_1 & loc_V_5_fu_623_p1) & ap_const_lv1_0);
    tmp_7_i_i_i_i_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_i_i_i_i_fu_383_p4),137));
    tmp_7_i_i_i_i_fu_383_p4 <= ((ap_const_lv1_1 & loc_V_1_fu_379_p1) & ap_const_lv1_0);
    tmp_9_fu_270_p2 <= "1" when (signed(i_reg_132) > signed(steps_reg_971)) else "0";
    tmp_9_i_i_i1_i1_fu_781_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_6_fu_735_p4));
        tmp_9_i_i_i1_i37_cas_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_i_i_i1_i1_fu_781_p2),12));

        tmp_9_i_i_i1_i_cast_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_i_i_i1_i_fu_537_p2),12));

    tmp_9_i_i_i1_i_fu_537_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_2_fu_491_p4));
        tmp_9_i_i_i_i16_cast_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_i_i_i_i1_fu_659_p2),12));

    tmp_9_i_i_i_i1_fu_659_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_4_fu_613_p4));
        tmp_9_i_i_i_i_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_i_i_i_i_fu_415_p2),12));

    tmp_9_i_i_i_i_fu_415_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_369_p4));
    tmp_fu_285_p4 <= X1_to_int_fu_281_p1(30 downto 23);
    tmp_i1_fu_239_p2 <= "1" when (signed(dy_reg_963) > signed(ap_const_lv32_0)) else "0";
    tmp_i2_fu_244_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(dy_reg_963));
    tmp_i_8_fu_227_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(dx_reg_955));
    tmp_i_fu_222_p2 <= "1" when (signed(dx_reg_955) > signed(ap_const_lv32_0)) else "0";
    tmp_i_i_i1_i1_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_i38_cast_fu_799_p1),137));
    tmp_i_i_i1_i39_cast_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_i38_cast_fu_799_p1),54));
    tmp_i_i_i1_i_cast_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_i_cast_fu_555_p1),54));
    tmp_i_i_i1_i_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_i_cast_fu_555_p1),137));
    tmp_i_i_i_i18_cast_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_i17_cast_fu_677_p1),54));
    tmp_i_i_i_i1_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_i17_cast_fu_677_p1),137));
    tmp_i_i_i_i8_i34_cas_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_6_fu_735_p4),12));
    tmp_i_i_i_i8_i_cast_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_2_fu_491_p4),12));
    tmp_i_i_i_i_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_i_cast_fu_433_p1),54));
    tmp_i_i_i_i_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_i_cast_fu_433_p1),137));
    tmp_i_i_i_i_i13_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_4_fu_613_p4),12));
    tmp_i_i_i_i_i_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_369_p4),12));
    tmp_s_fu_327_p4 <= Y1_to_int_fu_323_p1(30 downto 23);
    xp <= 
        p_Val2_4_fu_865_p3 when (tmp_4_reg_1021(0) = '1') else 
        p_Val2_9_fu_884_p3;

    xp_ap_vld_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            xp_ap_vld <= ap_const_logic_1;
        else 
            xp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    yp <= 
        p_Val2_14_fu_911_p3 when (tmp_13_reg_1031(0) = '1') else 
        p_Val2_19_fu_930_p3;

    yp_ap_vld_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            yp_ap_vld <= ap_const_logic_1;
        else 
            yp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
