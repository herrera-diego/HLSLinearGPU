// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dda,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.380000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=4757,HLS_SYN_LUT=11380,HLS_VERSION=2018_2}" *)

module dda (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x0,
        y0,
        x1,
        y1,
        xp,
        xp_ap_vld,
        yp,
        yp_ap_vld
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x0;
input  [31:0] y0;
input  [31:0] x1;
input  [31:0] y1;
output  [31:0] xp;
output   xp_ap_vld;
output  [31:0] yp;
output   yp_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xp_ap_vld;
reg yp_ap_vld;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_190_p2;
reg   [63:0] reg_202;
wire    ap_CS_fsm_state26;
reg   [0:0] tmp_4_reg_1021;
wire   [63:0] grp_fu_196_p2;
reg   [63:0] reg_206;
reg   [0:0] tmp_13_reg_1031;
wire   [31:0] dx_fu_210_p2;
reg   [31:0] dx_reg_955;
wire   [31:0] dy_fu_216_p2;
reg   [31:0] dy_reg_963;
wire   [31:0] steps_fu_262_p3;
reg   [31:0] steps_reg_971;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_161_p1;
reg   [31:0] tmp_6_reg_977;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_164_p1;
reg   [31:0] tmp_7_reg_982;
wire   [31:0] grp_fu_167_p1;
reg   [31:0] tmp_8_reg_988;
reg   [31:0] X_reg_993;
wire    ap_CS_fsm_state18;
reg   [31:0] Y_reg_998;
wire   [31:0] grp_fu_153_p2;
reg   [31:0] Xinc_reg_1003;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_157_p2;
reg   [31:0] Yinc_reg_1008;
wire   [31:0] i_1_fu_275_p2;
reg   [31:0] i_1_reg_1016;
wire    ap_CS_fsm_state20;
wire   [0:0] tmp_4_fu_317_p2;
wire   [0:0] tmp_9_fu_270_p2;
wire   [63:0] tmp_1_i_fu_170_p1;
reg   [63:0] tmp_1_i_reg_1026;
wire   [0:0] tmp_13_fu_359_p2;
wire   [63:0] tmp_1_i4_fu_174_p1;
reg   [63:0] tmp_1_i4_reg_1036;
wire   [31:0] grp_fu_143_p2;
reg   [31:0] X_1_reg_1041;
wire    ap_CS_fsm_state24;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] Y_1_reg_1046;
wire   [63:0] p_Val2_s_fu_365_p1;
reg   [63:0] p_Val2_s_reg_1051;
wire    ap_CS_fsm_state27;
wire   [31:0] p_Val2_2_fu_479_p3;
reg   [31:0] p_Val2_2_reg_1056;
wire   [63:0] p_Val2_5_fu_487_p1;
reg   [63:0] p_Val2_5_reg_1062;
wire   [31:0] p_Val2_7_fu_601_p3;
reg   [31:0] p_Val2_7_reg_1067;
wire   [63:0] p_Val2_10_fu_609_p1;
reg   [63:0] p_Val2_10_reg_1073;
wire   [31:0] p_Val2_12_fu_723_p3;
reg   [31:0] p_Val2_12_reg_1078;
wire   [63:0] p_Val2_15_fu_731_p1;
reg   [63:0] p_Val2_15_reg_1084;
wire   [31:0] p_Val2_17_fu_845_p3;
reg   [31:0] p_Val2_17_reg_1089;
reg   [31:0] x_assign_reg_112;
wire    ap_CS_fsm_state28;
reg   [31:0] x_assign_3_reg_122;
reg   [31:0] i_reg_132;
wire    ap_CS_fsm_state8;
reg   [31:0] grp_fu_161_p0;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state14;
reg   [31:0] grp_fu_164_p0;
reg   [63:0] grp_fu_190_p1;
wire    ap_CS_fsm_state21;
reg   [63:0] grp_fu_196_p1;
wire   [0:0] tmp_i_fu_222_p2;
wire   [31:0] tmp_i_8_fu_227_p2;
wire   [0:0] tmp_i1_fu_239_p2;
wire   [31:0] tmp_i2_fu_244_p2;
wire   [31:0] n_assign_1_fu_232_p3;
wire   [31:0] n_assign_3_fu_249_p3;
wire   [0:0] tmp_5_fu_256_p2;
wire   [31:0] X1_to_int_fu_281_p1;
wire   [7:0] tmp_fu_285_p4;
wire   [22:0] tmp_1_fu_295_p1;
wire   [0:0] notrhs_fu_305_p2;
wire   [0:0] notlhs_fu_299_p2;
wire   [0:0] tmp_2_fu_311_p2;
wire   [0:0] tmp_3_fu_178_p2;
wire   [31:0] Y1_to_int_fu_323_p1;
wire   [7:0] tmp_s_fu_327_p4;
wire   [22:0] tmp_27_fu_337_p1;
wire   [0:0] notrhs1_fu_347_p2;
wire   [0:0] notlhs1_fu_341_p2;
wire   [0:0] tmp_11_fu_353_p2;
wire   [0:0] tmp_12_fu_184_p2;
wire   [51:0] loc_V_1_fu_379_p1;
wire   [53:0] tmp_7_i_i_i_i_fu_383_p4;
wire   [10:0] loc_V_fu_369_p4;
wire   [11:0] tmp_i_i_i_i_i_cast_fu_397_p1;
wire   [11:0] sh_assign_fu_401_p2;
wire   [10:0] tmp_9_i_i_i_i_fu_415_p2;
wire   [0:0] isNeg_fu_407_p3;
wire  signed [11:0] tmp_9_i_i_i_i_cast_fu_421_p1;
wire   [11:0] sh_assign_1_fu_425_p3;
wire  signed [31:0] sh_assign_1_i_cast_fu_433_p1;
wire   [53:0] tmp_i_i_i_i_cast_fu_441_p1;
wire   [136:0] tmp_7_i_i_i_i_cast_fu_393_p1;
wire   [136:0] tmp_i_i_i_i_fu_437_p1;
wire   [53:0] tmp_1_i_i_i_i_fu_445_p2;
wire   [0:0] tmp_18_fu_457_p3;
wire   [136:0] tmp_3_i_i_i_i_fu_451_p2;
wire   [31:0] tmp_10_fu_465_p1;
wire   [31:0] tmp_14_fu_469_p4;
wire   [51:0] loc_V_3_fu_501_p1;
wire   [53:0] tmp_7_i_i_i7_i_fu_505_p4;
wire   [10:0] loc_V_2_fu_491_p4;
wire   [11:0] tmp_i_i_i_i8_i_cast_fu_519_p1;
wire   [11:0] sh_assign_2_fu_523_p2;
wire   [10:0] tmp_9_i_i_i1_i_fu_537_p2;
wire   [0:0] isNeg_1_fu_529_p3;
wire  signed [11:0] tmp_9_i_i_i1_i_cast_fu_543_p1;
wire   [11:0] sh_assign_3_fu_547_p3;
wire  signed [31:0] sh_assign_3_i_cast_fu_555_p1;
wire   [53:0] tmp_i_i_i1_i_cast_fu_563_p1;
wire   [136:0] tmp_7_i_i_i7_i_cast_fu_515_p1;
wire   [136:0] tmp_i_i_i1_i_fu_559_p1;
wire   [53:0] tmp_1_i_i_i1_i_fu_567_p2;
wire   [0:0] tmp_26_fu_579_p3;
wire   [136:0] tmp_3_i_i_i1_i_fu_573_p2;
wire   [31:0] tmp_15_fu_587_p1;
wire   [31:0] tmp_16_fu_591_p4;
wire   [51:0] loc_V_5_fu_623_p1;
wire   [53:0] tmp_7_i_i_i_i1_fu_627_p4;
wire   [10:0] loc_V_4_fu_613_p4;
wire   [11:0] tmp_i_i_i_i_i13_cast_fu_641_p1;
wire   [11:0] sh_assign_4_fu_645_p2;
wire   [10:0] tmp_9_i_i_i_i1_fu_659_p2;
wire   [0:0] isNeg_2_fu_651_p3;
wire  signed [11:0] tmp_9_i_i_i_i16_cast_fu_665_p1;
wire   [11:0] sh_assign_5_fu_669_p3;
wire  signed [31:0] sh_assign_1_i17_cast_fu_677_p1;
wire   [53:0] tmp_i_i_i_i18_cast_fu_685_p1;
wire   [136:0] tmp_7_i_i_i_i12_cast_fu_637_p1;
wire   [136:0] tmp_i_i_i_i1_fu_681_p1;
wire   [53:0] tmp_1_i_i_i_i1_fu_689_p2;
wire   [0:0] tmp_33_fu_701_p3;
wire   [136:0] tmp_3_i_i_i_i1_fu_695_p2;
wire   [31:0] tmp_17_fu_709_p1;
wire   [31:0] tmp_19_fu_713_p4;
wire   [51:0] loc_V_7_fu_745_p1;
wire   [53:0] tmp_7_i_i_i7_i1_fu_749_p4;
wire   [10:0] loc_V_6_fu_735_p4;
wire   [11:0] tmp_i_i_i_i8_i34_cas_fu_763_p1;
wire   [11:0] sh_assign_6_fu_767_p2;
wire   [10:0] tmp_9_i_i_i1_i1_fu_781_p2;
wire   [0:0] isNeg_3_fu_773_p3;
wire  signed [11:0] tmp_9_i_i_i1_i37_cas_fu_787_p1;
wire   [11:0] sh_assign_7_fu_791_p3;
wire  signed [31:0] sh_assign_3_i38_cast_fu_799_p1;
wire   [53:0] tmp_i_i_i1_i39_cast_fu_807_p1;
wire   [136:0] tmp_7_i_i_i7_i33_cas_fu_759_p1;
wire   [136:0] tmp_i_i_i1_i1_fu_803_p1;
wire   [53:0] tmp_1_i_i_i1_i1_fu_811_p2;
wire   [0:0] tmp_37_fu_823_p3;
wire   [136:0] tmp_3_i_i_i1_i1_fu_817_p2;
wire   [31:0] tmp_20_fu_831_p1;
wire   [31:0] tmp_21_fu_835_p4;
wire   [0:0] p_Result_s_fu_853_p3;
wire   [31:0] p_Val2_6_i_i_i_i_fu_860_p2;
wire   [0:0] p_Result_1_fu_872_p3;
wire   [31:0] p_Val2_6_i_i_i1_i_fu_879_p2;
wire   [31:0] p_Val2_4_fu_865_p3;
wire   [31:0] p_Val2_9_fu_884_p3;
wire   [0:0] p_Result_2_fu_899_p3;
wire   [31:0] p_Val2_6_i_i_i_i1_fu_906_p2;
wire   [0:0] p_Result_3_fu_918_p3;
wire   [31:0] p_Val2_6_i_i_i1_i1_fu_925_p2;
wire   [31:0] p_Val2_14_fu_911_p3;
wire   [31:0] p_Val2_19_fu_930_p3;
reg   [27:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
end

dda_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dda_fadd_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_assign_reg_112),
    .din1(Xinc_reg_1003),
    .ce(1'b1),
    .dout(grp_fu_143_p2)
);

dda_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dda_fadd_32ns_32nbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_assign_3_reg_122),
    .din1(Yinc_reg_1008),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

dda_fdiv_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dda_fdiv_32ns_32ncud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_reg_977),
    .din1(tmp_7_reg_982),
    .ce(1'b1),
    .dout(grp_fu_153_p2)
);

dda_fdiv_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dda_fdiv_32ns_32ncud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_8_reg_988),
    .din1(tmp_7_reg_982),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

dda_sitofp_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dda_sitofp_32ns_3dEe_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_161_p0),
    .ce(1'b1),
    .dout(grp_fu_161_p1)
);

dda_sitofp_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dda_sitofp_32ns_3dEe_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_164_p0),
    .ce(1'b1),
    .dout(grp_fu_164_p1)
);

dda_sitofp_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dda_sitofp_32ns_3dEe_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dy_reg_963),
    .ce(1'b1),
    .dout(grp_fu_167_p1)
);

dda_fpext_32ns_64eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
dda_fpext_32ns_64eOg_U8(
    .din0(x_assign_reg_112),
    .dout(tmp_1_i_fu_170_p1)
);

dda_fpext_32ns_64eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
dda_fpext_32ns_64eOg_U9(
    .din0(x_assign_3_reg_122),
    .dout(tmp_1_i4_fu_174_p1)
);

dda_fcmp_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dda_fcmp_32ns_32nfYi_U10(
    .din0(x_assign_reg_112),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_3_fu_178_p2)
);

dda_fcmp_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dda_fcmp_32ns_32nfYi_U11(
    .din0(x_assign_3_reg_122),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_12_fu_184_p2)
);

dda_dadd_64ns_64ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dda_dadd_64ns_64ng8j_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_i_reg_1026),
    .din1(grp_fu_190_p1),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

dda_dadd_64ns_64ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dda_dadd_64ns_64ng8j_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_i4_reg_1036),
    .din1(grp_fu_196_p1),
    .ce(1'b1),
    .dout(grp_fu_196_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_reg_132 <= i_1_reg_1016;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        i_reg_132 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        x_assign_3_reg_122 <= Y_1_reg_1046;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        x_assign_3_reg_122 <= Y_reg_998;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        x_assign_reg_112 <= X_1_reg_1041;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        x_assign_reg_112 <= X_reg_993;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        X_1_reg_1041 <= grp_fu_143_p2;
        Y_1_reg_1046 <= grp_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        X_reg_993 <= grp_fu_161_p1;
        Y_reg_998 <= grp_fu_164_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        Xinc_reg_1003 <= grp_fu_153_p2;
        Yinc_reg_1008 <= grp_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dx_reg_955 <= dx_fu_210_p2;
        dy_reg_963 <= dy_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_1_reg_1016 <= i_1_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_1031 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        p_Val2_10_reg_1073 <= p_Val2_10_fu_609_p1;
        p_Val2_12_reg_1078 <= p_Val2_12_fu_723_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_reg_1031 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        p_Val2_15_reg_1084 <= p_Val2_15_fu_731_p1;
        p_Val2_17_reg_1089 <= p_Val2_17_fu_845_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_reg_1021 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        p_Val2_2_reg_1056 <= p_Val2_2_fu_479_p3;
        p_Val2_s_reg_1051 <= p_Val2_s_fu_365_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        p_Val2_5_reg_1062 <= p_Val2_5_fu_487_p1;
        p_Val2_7_reg_1067 <= p_Val2_7_fu_601_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_state26)) | ((tmp_4_reg_1021 == 1'd1) & (1'b1 == ap_CS_fsm_state26)))) begin
        reg_202 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_13_reg_1031 == 1'd0) & (1'b1 == ap_CS_fsm_state26)) | ((tmp_13_reg_1031 == 1'd1) & (1'b1 == ap_CS_fsm_state26)))) begin
        reg_206 <= grp_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        steps_reg_971 <= steps_fu_262_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        tmp_13_reg_1031 <= tmp_13_fu_359_p2;
        tmp_1_i4_reg_1036 <= tmp_1_i4_fu_174_p1;
        tmp_1_i_reg_1026 <= tmp_1_i_fu_170_p1;
        tmp_4_reg_1021 <= tmp_4_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_6_reg_977 <= grp_fu_161_p1;
        tmp_7_reg_982 <= grp_fu_164_p1;
        tmp_8_reg_988 <= grp_fu_167_p1;
    end
end

always @ (*) begin
    if (((tmp_9_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_9_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_161_p0 = x0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_161_p0 = dx_reg_955;
    end else begin
        grp_fu_161_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_164_p0 = y0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_164_p0 = steps_reg_971;
    end else begin
        grp_fu_164_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        if ((tmp_4_reg_1021 == 1'd0)) begin
            grp_fu_190_p1 = 64'd4602678819172646912;
        end else if ((tmp_4_reg_1021 == 1'd1)) begin
            grp_fu_190_p1 = 64'd13826050856027422720;
        end else begin
            grp_fu_190_p1 = 'bx;
        end
    end else begin
        grp_fu_190_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        if ((tmp_13_reg_1031 == 1'd0)) begin
            grp_fu_196_p1 = 64'd4602678819172646912;
        end else if ((tmp_13_reg_1031 == 1'd1)) begin
            grp_fu_196_p1 = 64'd13826050856027422720;
        end else begin
            grp_fu_196_p1 = 'bx;
        end
    end else begin
        grp_fu_196_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        xp_ap_vld = 1'b1;
    end else begin
        xp_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        yp_ap_vld = 1'b1;
    end else begin
        yp_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((tmp_9_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X1_to_int_fu_281_p1 = x_assign_reg_112;

assign Y1_to_int_fu_323_p1 = x_assign_3_reg_122;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign dx_fu_210_p2 = (x1 - x0);

assign dy_fu_216_p2 = (y1 - y0);

assign i_1_fu_275_p2 = (i_reg_132 + 32'd1);

assign isNeg_1_fu_529_p3 = sh_assign_2_fu_523_p2[32'd11];

assign isNeg_2_fu_651_p3 = sh_assign_4_fu_645_p2[32'd11];

assign isNeg_3_fu_773_p3 = sh_assign_6_fu_767_p2[32'd11];

assign isNeg_fu_407_p3 = sh_assign_fu_401_p2[32'd11];

assign loc_V_1_fu_379_p1 = p_Val2_s_fu_365_p1[51:0];

assign loc_V_2_fu_491_p4 = {{p_Val2_5_fu_487_p1[62:52]}};

assign loc_V_3_fu_501_p1 = p_Val2_5_fu_487_p1[51:0];

assign loc_V_4_fu_613_p4 = {{p_Val2_10_fu_609_p1[62:52]}};

assign loc_V_5_fu_623_p1 = p_Val2_10_fu_609_p1[51:0];

assign loc_V_6_fu_735_p4 = {{p_Val2_15_fu_731_p1[62:52]}};

assign loc_V_7_fu_745_p1 = p_Val2_15_fu_731_p1[51:0];

assign loc_V_fu_369_p4 = {{p_Val2_s_fu_365_p1[62:52]}};

assign n_assign_1_fu_232_p3 = ((tmp_i_fu_222_p2[0:0] === 1'b1) ? dx_reg_955 : tmp_i_8_fu_227_p2);

assign n_assign_3_fu_249_p3 = ((tmp_i1_fu_239_p2[0:0] === 1'b1) ? dy_reg_963 : tmp_i2_fu_244_p2);

assign notlhs1_fu_341_p2 = ((tmp_s_fu_327_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_299_p2 = ((tmp_fu_285_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_347_p2 = ((tmp_27_fu_337_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_305_p2 = ((tmp_1_fu_295_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_Result_1_fu_872_p3 = p_Val2_5_reg_1062[32'd63];

assign p_Result_2_fu_899_p3 = p_Val2_10_reg_1073[32'd63];

assign p_Result_3_fu_918_p3 = p_Val2_15_reg_1084[32'd63];

assign p_Result_s_fu_853_p3 = p_Val2_s_reg_1051[32'd63];

assign p_Val2_10_fu_609_p1 = reg_206;

assign p_Val2_12_fu_723_p3 = ((isNeg_2_fu_651_p3[0:0] === 1'b1) ? tmp_17_fu_709_p1 : tmp_19_fu_713_p4);

assign p_Val2_14_fu_911_p3 = ((p_Result_2_fu_899_p3[0:0] === 1'b1) ? p_Val2_6_i_i_i_i1_fu_906_p2 : p_Val2_12_reg_1078);

assign p_Val2_15_fu_731_p1 = reg_206;

assign p_Val2_17_fu_845_p3 = ((isNeg_3_fu_773_p3[0:0] === 1'b1) ? tmp_20_fu_831_p1 : tmp_21_fu_835_p4);

assign p_Val2_19_fu_930_p3 = ((p_Result_3_fu_918_p3[0:0] === 1'b1) ? p_Val2_6_i_i_i1_i1_fu_925_p2 : p_Val2_17_reg_1089);

assign p_Val2_2_fu_479_p3 = ((isNeg_fu_407_p3[0:0] === 1'b1) ? tmp_10_fu_465_p1 : tmp_14_fu_469_p4);

assign p_Val2_4_fu_865_p3 = ((p_Result_s_fu_853_p3[0:0] === 1'b1) ? p_Val2_6_i_i_i_i_fu_860_p2 : p_Val2_2_reg_1056);

assign p_Val2_5_fu_487_p1 = reg_202;

assign p_Val2_6_i_i_i1_i1_fu_925_p2 = (32'd0 - p_Val2_17_reg_1089);

assign p_Val2_6_i_i_i1_i_fu_879_p2 = (32'd0 - p_Val2_7_reg_1067);

assign p_Val2_6_i_i_i_i1_fu_906_p2 = (32'd0 - p_Val2_12_reg_1078);

assign p_Val2_6_i_i_i_i_fu_860_p2 = (32'd0 - p_Val2_2_reg_1056);

assign p_Val2_7_fu_601_p3 = ((isNeg_1_fu_529_p3[0:0] === 1'b1) ? tmp_15_fu_587_p1 : tmp_16_fu_591_p4);

assign p_Val2_9_fu_884_p3 = ((p_Result_1_fu_872_p3[0:0] === 1'b1) ? p_Val2_6_i_i_i1_i_fu_879_p2 : p_Val2_7_reg_1067);

assign p_Val2_s_fu_365_p1 = reg_202;

assign sh_assign_1_fu_425_p3 = ((isNeg_fu_407_p3[0:0] === 1'b1) ? tmp_9_i_i_i_i_cast_fu_421_p1 : sh_assign_fu_401_p2);

assign sh_assign_1_i17_cast_fu_677_p1 = $signed(sh_assign_5_fu_669_p3);

assign sh_assign_1_i_cast_fu_433_p1 = $signed(sh_assign_1_fu_425_p3);

assign sh_assign_2_fu_523_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i8_i_cast_fu_519_p1));

assign sh_assign_3_fu_547_p3 = ((isNeg_1_fu_529_p3[0:0] === 1'b1) ? tmp_9_i_i_i1_i_cast_fu_543_p1 : sh_assign_2_fu_523_p2);

assign sh_assign_3_i38_cast_fu_799_p1 = $signed(sh_assign_7_fu_791_p3);

assign sh_assign_3_i_cast_fu_555_p1 = $signed(sh_assign_3_fu_547_p3);

assign sh_assign_4_fu_645_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_i13_cast_fu_641_p1));

assign sh_assign_5_fu_669_p3 = ((isNeg_2_fu_651_p3[0:0] === 1'b1) ? tmp_9_i_i_i_i16_cast_fu_665_p1 : sh_assign_4_fu_645_p2);

assign sh_assign_6_fu_767_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i8_i34_cas_fu_763_p1));

assign sh_assign_7_fu_791_p3 = ((isNeg_3_fu_773_p3[0:0] === 1'b1) ? tmp_9_i_i_i1_i37_cas_fu_787_p1 : sh_assign_6_fu_767_p2);

assign sh_assign_fu_401_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_i_cast_fu_397_p1));

assign steps_fu_262_p3 = ((tmp_5_fu_256_p2[0:0] === 1'b1) ? n_assign_1_fu_232_p3 : n_assign_3_fu_249_p3);

assign tmp_10_fu_465_p1 = tmp_18_fu_457_p3;

assign tmp_11_fu_353_p2 = (notrhs1_fu_347_p2 | notlhs1_fu_341_p2);

assign tmp_13_fu_359_p2 = (tmp_12_fu_184_p2 & tmp_11_fu_353_p2);

assign tmp_14_fu_469_p4 = {{tmp_3_i_i_i_i_fu_451_p2[84:53]}};

assign tmp_15_fu_587_p1 = tmp_26_fu_579_p3;

assign tmp_16_fu_591_p4 = {{tmp_3_i_i_i1_i_fu_573_p2[84:53]}};

assign tmp_17_fu_709_p1 = tmp_33_fu_701_p3;

assign tmp_18_fu_457_p3 = tmp_1_i_i_i_i_fu_445_p2[32'd53];

assign tmp_19_fu_713_p4 = {{tmp_3_i_i_i_i1_fu_695_p2[84:53]}};

assign tmp_1_fu_295_p1 = X1_to_int_fu_281_p1[22:0];

assign tmp_1_i_i_i1_i1_fu_811_p2 = tmp_7_i_i_i7_i1_fu_749_p4 >> tmp_i_i_i1_i39_cast_fu_807_p1;

assign tmp_1_i_i_i1_i_fu_567_p2 = tmp_7_i_i_i7_i_fu_505_p4 >> tmp_i_i_i1_i_cast_fu_563_p1;

assign tmp_1_i_i_i_i1_fu_689_p2 = tmp_7_i_i_i_i1_fu_627_p4 >> tmp_i_i_i_i18_cast_fu_685_p1;

assign tmp_1_i_i_i_i_fu_445_p2 = tmp_7_i_i_i_i_fu_383_p4 >> tmp_i_i_i_i_cast_fu_441_p1;

assign tmp_20_fu_831_p1 = tmp_37_fu_823_p3;

assign tmp_21_fu_835_p4 = {{tmp_3_i_i_i1_i1_fu_817_p2[84:53]}};

assign tmp_26_fu_579_p3 = tmp_1_i_i_i1_i_fu_567_p2[32'd53];

assign tmp_27_fu_337_p1 = Y1_to_int_fu_323_p1[22:0];

assign tmp_2_fu_311_p2 = (notrhs_fu_305_p2 | notlhs_fu_299_p2);

assign tmp_33_fu_701_p3 = tmp_1_i_i_i_i1_fu_689_p2[32'd53];

assign tmp_37_fu_823_p3 = tmp_1_i_i_i1_i1_fu_811_p2[32'd53];

assign tmp_3_i_i_i1_i1_fu_817_p2 = tmp_7_i_i_i7_i33_cas_fu_759_p1 << tmp_i_i_i1_i1_fu_803_p1;

assign tmp_3_i_i_i1_i_fu_573_p2 = tmp_7_i_i_i7_i_cast_fu_515_p1 << tmp_i_i_i1_i_fu_559_p1;

assign tmp_3_i_i_i_i1_fu_695_p2 = tmp_7_i_i_i_i12_cast_fu_637_p1 << tmp_i_i_i_i1_fu_681_p1;

assign tmp_3_i_i_i_i_fu_451_p2 = tmp_7_i_i_i_i_cast_fu_393_p1 << tmp_i_i_i_i_fu_437_p1;

assign tmp_4_fu_317_p2 = (tmp_3_fu_178_p2 & tmp_2_fu_311_p2);

assign tmp_5_fu_256_p2 = (($signed(n_assign_1_fu_232_p3) > $signed(n_assign_3_fu_249_p3)) ? 1'b1 : 1'b0);

assign tmp_7_i_i_i7_i1_fu_749_p4 = {{{{1'd1}, {loc_V_7_fu_745_p1}}}, {1'd0}};

assign tmp_7_i_i_i7_i33_cas_fu_759_p1 = tmp_7_i_i_i7_i1_fu_749_p4;

assign tmp_7_i_i_i7_i_cast_fu_515_p1 = tmp_7_i_i_i7_i_fu_505_p4;

assign tmp_7_i_i_i7_i_fu_505_p4 = {{{{1'd1}, {loc_V_3_fu_501_p1}}}, {1'd0}};

assign tmp_7_i_i_i_i12_cast_fu_637_p1 = tmp_7_i_i_i_i1_fu_627_p4;

assign tmp_7_i_i_i_i1_fu_627_p4 = {{{{1'd1}, {loc_V_5_fu_623_p1}}}, {1'd0}};

assign tmp_7_i_i_i_i_cast_fu_393_p1 = tmp_7_i_i_i_i_fu_383_p4;

assign tmp_7_i_i_i_i_fu_383_p4 = {{{{1'd1}, {loc_V_1_fu_379_p1}}}, {1'd0}};

assign tmp_9_fu_270_p2 = (($signed(i_reg_132) > $signed(steps_reg_971)) ? 1'b1 : 1'b0);

assign tmp_9_i_i_i1_i1_fu_781_p2 = (11'd1023 - loc_V_6_fu_735_p4);

assign tmp_9_i_i_i1_i37_cas_fu_787_p1 = $signed(tmp_9_i_i_i1_i1_fu_781_p2);

assign tmp_9_i_i_i1_i_cast_fu_543_p1 = $signed(tmp_9_i_i_i1_i_fu_537_p2);

assign tmp_9_i_i_i1_i_fu_537_p2 = (11'd1023 - loc_V_2_fu_491_p4);

assign tmp_9_i_i_i_i16_cast_fu_665_p1 = $signed(tmp_9_i_i_i_i1_fu_659_p2);

assign tmp_9_i_i_i_i1_fu_659_p2 = (11'd1023 - loc_V_4_fu_613_p4);

assign tmp_9_i_i_i_i_cast_fu_421_p1 = $signed(tmp_9_i_i_i_i_fu_415_p2);

assign tmp_9_i_i_i_i_fu_415_p2 = (11'd1023 - loc_V_fu_369_p4);

assign tmp_fu_285_p4 = {{X1_to_int_fu_281_p1[30:23]}};

assign tmp_i1_fu_239_p2 = (($signed(dy_reg_963) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_i2_fu_244_p2 = (32'd0 - dy_reg_963);

assign tmp_i_8_fu_227_p2 = (32'd0 - dx_reg_955);

assign tmp_i_fu_222_p2 = (($signed(dx_reg_955) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_i_i_i1_i1_fu_803_p1 = $unsigned(sh_assign_3_i38_cast_fu_799_p1);

assign tmp_i_i_i1_i39_cast_fu_807_p1 = $unsigned(sh_assign_3_i38_cast_fu_799_p1);

assign tmp_i_i_i1_i_cast_fu_563_p1 = $unsigned(sh_assign_3_i_cast_fu_555_p1);

assign tmp_i_i_i1_i_fu_559_p1 = $unsigned(sh_assign_3_i_cast_fu_555_p1);

assign tmp_i_i_i_i18_cast_fu_685_p1 = $unsigned(sh_assign_1_i17_cast_fu_677_p1);

assign tmp_i_i_i_i1_fu_681_p1 = $unsigned(sh_assign_1_i17_cast_fu_677_p1);

assign tmp_i_i_i_i8_i34_cas_fu_763_p1 = loc_V_6_fu_735_p4;

assign tmp_i_i_i_i8_i_cast_fu_519_p1 = loc_V_2_fu_491_p4;

assign tmp_i_i_i_i_cast_fu_441_p1 = $unsigned(sh_assign_1_i_cast_fu_433_p1);

assign tmp_i_i_i_i_fu_437_p1 = $unsigned(sh_assign_1_i_cast_fu_433_p1);

assign tmp_i_i_i_i_i13_cast_fu_641_p1 = loc_V_4_fu_613_p4;

assign tmp_i_i_i_i_i_cast_fu_397_p1 = loc_V_fu_369_p4;

assign tmp_s_fu_327_p4 = {{Y1_to_int_fu_323_p1[30:23]}};

assign xp = ((tmp_4_reg_1021[0:0] === 1'b1) ? p_Val2_4_fu_865_p3 : p_Val2_9_fu_884_p3);

assign yp = ((tmp_13_reg_1031[0:0] === 1'b1) ? p_Val2_14_fu_911_p3 : p_Val2_19_fu_930_p3);

endmodule //dda
