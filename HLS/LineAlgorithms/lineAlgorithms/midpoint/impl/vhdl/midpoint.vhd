-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity midpoint is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x1 : IN STD_LOGIC_VECTOR (31 downto 0);
    y1 : IN STD_LOGIC_VECTOR (31 downto 0);
    xp : OUT STD_LOGIC_VECTOR (31 downto 0);
    xp_ap_vld : OUT STD_LOGIC;
    yp : OUT STD_LOGIC_VECTOR (31 downto 0);
    yp_ap_vld : OUT STD_LOGIC );
end;


architecture behav of midpoint is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "midpoint,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.404000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=226,HLS_SYN_LUT=513,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dx_fu_97_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_reg_237 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal dy_fu_119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_0_s_fu_205_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_1_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_reg_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_79 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_103_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_141_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_125_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_154_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_185_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_0_s_fu_199_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d1_reg_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                d1_reg_70 <= d_1_fu_214_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                d1_reg_70 <= d_fu_162_p2;
            end if; 
        end if;
    end process;

    x_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_reg_79 <= x_1_fu_178_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                x_reg_79 <= x0;
            end if; 
        end if;
    end process;

    y_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_reg_88 <= y_0_s_fu_205_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                y_reg_88 <= y0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                dx_reg_230 <= dx_fu_97_p2;
                p_lshr_reg_237 <= p_neg_fu_103_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                dy_reg_247 <= dy_fu_119_p2;
                tmp_2_reg_257 <= tmp_2_fu_168_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_3_fu_173_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((tmp_3_fu_173_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state3, tmp_3_fu_173_p2)
    begin
        if (((tmp_3_fu_173_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, tmp_3_fu_173_p2)
    begin
        if (((tmp_3_fu_173_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_1_fu_214_p2 <= std_logic_vector(unsigned(dy_0_s_fu_199_p3) + unsigned(d1_reg_70));
    d_fu_162_p2 <= std_logic_vector(unsigned(dy_fu_119_p2) - unsigned(tmp_fu_154_p3));
    dx_fu_97_p2 <= std_logic_vector(unsigned(x1) - unsigned(x0));
    dy_0_s_fu_199_p3 <= 
        dy_reg_247 when (tmp_6_fu_185_p3(0) = '1') else 
        tmp_2_reg_257;
    dy_fu_119_p2 <= std_logic_vector(unsigned(y1) - unsigned(y0));
    p_lshr_f_fu_141_p4 <= dx_reg_230(31 downto 1);
    p_neg_fu_103_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(dx_fu_97_p2));
    p_neg_t_fu_135_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_1_fu_132_p1));
    tmp_1_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_reg_237),32));
    tmp_2_fu_168_p2 <= std_logic_vector(unsigned(dy_fu_119_p2) - unsigned(dx_reg_230));
    tmp_3_fu_173_p2 <= "1" when (signed(x_reg_79) < signed(x1)) else "0";
    tmp_4_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_fu_141_p4),32));
    tmp_5_fu_125_p3 <= dx_reg_230(31 downto 31);
    tmp_6_fu_185_p3 <= d1_reg_70(31 downto 31);
    tmp_fu_154_p3 <= 
        p_neg_t_fu_135_p2 when (tmp_5_fu_125_p3(0) = '1') else 
        tmp_4_fu_150_p1;
    x_1_fu_178_p2 <= std_logic_vector(unsigned(x_reg_79) + unsigned(ap_const_lv32_1));
    xp <= std_logic_vector(unsigned(x_reg_79) + unsigned(ap_const_lv32_1));

    xp_ap_vld_assign_proc : process(ap_CS_fsm_state3, tmp_3_fu_173_p2)
    begin
        if (((tmp_3_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            xp_ap_vld <= ap_const_logic_1;
        else 
            xp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_0_s_fu_205_p3 <= 
        y_reg_88 when (tmp_6_fu_185_p3(0) = '1') else 
        y_1_fu_193_p2;
    y_1_fu_193_p2 <= std_logic_vector(unsigned(y_reg_88) + unsigned(ap_const_lv32_1));
    yp <= 
        y_reg_88 when (tmp_6_fu_185_p3(0) = '1') else 
        y_1_fu_193_p2;

    yp_ap_vld_assign_proc : process(ap_CS_fsm_state3, tmp_3_fu_173_p2)
    begin
        if (((tmp_3_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            yp_ap_vld <= ap_const_logic_1;
        else 
            yp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
