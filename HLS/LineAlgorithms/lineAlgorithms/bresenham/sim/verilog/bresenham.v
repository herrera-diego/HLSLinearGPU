// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bresenham,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.774000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=193,HLS_SYN_LUT=428,HLS_VERSION=2018_2}" *)

module bresenham (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x0,
        y0,
        x1,
        y1,
        xp,
        xp_ap_vld,
        yp,
        yp_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x0;
input  [31:0] y0;
input  [31:0] x1;
input  [31:0] y1;
output  [31:0] xp;
output   xp_ap_vld;
output  [31:0] yp;
output   yp_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xp_ap_vld;
reg yp_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] tmp_fu_94_p2;
reg   [31:0] tmp_reg_186;
wire    ap_CS_fsm_state2;
wire   [31:0] m_new_fu_100_p2;
reg   [31:0] m_new_reg_201;
wire   [31:0] slope_error_new_fu_111_p2;
wire   [31:0] tmp_4_fu_123_p2;
reg   [31:0] tmp_4_reg_211;
wire   [31:0] slope_error_new_1_fu_158_p3;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_5_fu_129_p2;
wire   [31:0] y_1_fu_166_p3;
wire   [31:0] x_1_fu_175_p2;
reg   [31:0] slope_error_new1_reg_66;
reg   [31:0] x_reg_75;
reg   [31:0] y_reg_85;
wire   [31:0] tmp_1_fu_105_p2;
wire   [31:0] tmp_3_fu_117_p2;
wire   [31:0] slope_error_new_2_fu_134_p2;
wire   [0:0] tmp_6_fu_139_p3;
wire   [31:0] slope_error_new_3_fu_153_p2;
wire   [31:0] y_2_fu_147_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        slope_error_new1_reg_66 <= slope_error_new_1_fu_158_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        slope_error_new1_reg_66 <= slope_error_new_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        x_reg_75 <= x_1_fu_175_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_75 <= x0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y_reg_85 <= y_1_fu_166_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_reg_85 <= y0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_new_reg_201[31 : 1] <= m_new_fu_100_p2[31 : 1];
        tmp_4_reg_211[31 : 1] <= tmp_4_fu_123_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_186 <= tmp_fu_94_p2;
    end
end

always @ (*) begin
    if (((tmp_5_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        xp_ap_vld = 1'b1;
    end else begin
        xp_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        yp_ap_vld = 1'b1;
    end else begin
        yp_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_5_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign m_new_fu_100_p2 = tmp_reg_186 << 32'd1;

assign slope_error_new_1_fu_158_p3 = ((tmp_6_fu_139_p3[0:0] === 1'b1) ? slope_error_new_2_fu_134_p2 : slope_error_new_3_fu_153_p2);

assign slope_error_new_2_fu_134_p2 = (slope_error_new1_reg_66 + m_new_reg_201);

assign slope_error_new_3_fu_153_p2 = (slope_error_new_2_fu_134_p2 - tmp_4_reg_211);

assign slope_error_new_fu_111_p2 = (tmp_1_fu_105_p2 + m_new_fu_100_p2);

assign tmp_1_fu_105_p2 = (x0 - x1);

assign tmp_3_fu_117_p2 = (x1 - x0);

assign tmp_4_fu_123_p2 = tmp_3_fu_117_p2 << 32'd1;

assign tmp_5_fu_129_p2 = (($signed(x_reg_75) > $signed(x1)) ? 1'b1 : 1'b0);

assign tmp_6_fu_139_p3 = slope_error_new_2_fu_134_p2[32'd31];

assign tmp_fu_94_p2 = (y1 - y0);

assign x_1_fu_175_p2 = (x_reg_75 + 32'd1);

assign xp = x_reg_75;

assign y_1_fu_166_p3 = ((tmp_6_fu_139_p3[0:0] === 1'b1) ? y_reg_85 : y_2_fu_147_p2);

assign y_2_fu_147_p2 = (y_reg_85 + 32'd1);

assign yp = ((tmp_6_fu_139_p3[0:0] === 1'b1) ? y_reg_85 : y_2_fu_147_p2);

always @ (posedge ap_clk) begin
    m_new_reg_201[0] <= 1'b0;
    tmp_4_reg_211[0] <= 1'b0;
end

endmodule //bresenham
